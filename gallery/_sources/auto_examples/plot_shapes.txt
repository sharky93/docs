.. _example_plot_shapes.py:


======
Shapes
======

This example shows how to draw several different shapes:

 - line
 - Bezier curve
 - polygon
 - circle
 - ellipse

Anti-aliased drawing for:

 - line
 - circle


.. image:: images/plot_shapes_1.png
    :align: center


.. raw:: html
    
    <p id="controls">
        <button type="button" class="btn btn-default btn-small editcode">
            <i class="icon-edit"></i>
        </button>
    </p>

.. literalinclude:: plot_shapes.py
    :lines: 20-


.. raw:: html

    <p class="run_btn">
        <button type="button" class="btn btn-default btn-lg runcode">
            <i class="icon-play"></i> Run
        </button>
        <img class="loading" src="../_static/ajax-loader.gif"/>
    </p>

.. raw:: html

    <p id="revert_btn">
        <button type="button" class="btn btn-default btn-lg" id="reload">
            <i class="icon-refresh"></i>
        </button>
    </p>

.. raw:: html

    <p>
        <div class="alert alert-success" id="success-message"></div>
        <div class="alert alert-error" id="error-message"></div>
        <div class="all-output">
            <p class="stdout-group">
                <i class="icon-info-sign"></i> <u>STDOUT</u>
            </p>
            <pre id="stdout"></pre>
            <hr class="stdout-group">
            <p class="stderr-group">
                <i class="icon-remove-sign"></i> <u>STDERR</u>
            </p>
            <pre id="stderr"></pre>
            <hr class="stderr-group">
        </div>
    </p>


**Python source code:** :download:`download <plot_shapes.py>`
(generated using ``skimage`` |version|)



**IPython Notebook:** :download:`download <./notebook/plot_shapes.ipynb>`
(generated using ``skimage`` |version|)


.. raw:: html

    <div class="tobehidden">aW1wb3J0IG1hdGgKaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKCmZyb20gc2tpbWFnZS5kcmF3IGltcG9ydCAobGluZSwgcG9seWdvbiwgY2lyY2xlLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZV9wZXJpbWV0ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxsaXBzZSwgZWxsaXBzZV9wZXJpbWV0ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYmV6aWVyX2N1cnZlKQoKCmZpZywgKGF4MSwgYXgyKSA9IHBsdC5zdWJwbG90cyhuY29scz0yLCBucm93cz0xLCBmaWdzaXplPSgxMCwgNikpCgoKaW1nID0gbnAuemVyb3MoKDUwMCwgNTAwLCAzKSwgZHR5cGU9bnAuZG91YmxlKQoKIyBkcmF3IGxpbmUKcnIsIGNjID0gbGluZSgxMjAsIDEyMywgMjAsIDQwMCkKaW1nW3JyLCBjYywgMF0gPSAyNTUKCiMgZmlsbCBwb2x5Z29uCnBvbHkgPSBucC5hcnJheSgoCiAgICAoMzAwLCAzMDApLAogICAgKDQ4MCwgMzIwKSwKICAgICgzODAsIDQzMCksCiAgICAoMjIwLCA1OTApLAogICAgKDMwMCwgMzAwKSwKKSkKcnIsIGNjID0gcG9seWdvbihwb2x5WzosIDBdLCBwb2x5WzosIDFdLCBpbWcuc2hhcGUpCmltZ1tyciwgY2MsIDFdID0gMQoKIyBmaWxsIGNpcmNsZQpyciwgY2MgPSBjaXJjbGUoMjAwLCAyMDAsIDEwMCwgaW1nLnNoYXBlKQppbWdbcnIsIGNjLCA6XSA9ICgxLCAxLCAwKQoKIyBmaWxsIGVsbGlwc2UKcnIsIGNjID0gZWxsaXBzZSgzMDAsIDMwMCwgMTAwLCAyMDAsIGltZy5zaGFwZSkKaW1nW3JyLCBjYywgMl0gPSAxCgojIGNpcmNsZQpyciwgY2MgPSBjaXJjbGVfcGVyaW1ldGVyKDEyMCwgNDAwLCAxNSkKaW1nW3JyLCBjYywgOl0gPSAoMSwgMCwgMCkKCiMgQmV6aWVyIGN1cnZlCnJyLCBjYyA9IGJlemllcl9jdXJ2ZSg3MCwgMTAwLCAxMCwgMTAsIDE1MCwgMTAwLCAxKQppbWdbcnIsIGNjLCA6XSA9ICgxLCAwLCAwKQoKIyBlbGxpcHNlcwpyciwgY2MgPSBlbGxpcHNlX3BlcmltZXRlcigxMjAsIDQwMCwgNjAsIDIwLCBvcmllbnRhdGlvbj1tYXRoLnBpIC8gNC4pCmltZ1tyciwgY2MsIDpdID0gKDEsIDAsIDEpCnJyLCBjYyA9IGVsbGlwc2VfcGVyaW1ldGVyKDEyMCwgNDAwLCA2MCwgMjAsIG9yaWVudGF0aW9uPS1tYXRoLnBpIC8gNC4pCmltZ1tyciwgY2MsIDpdID0gKDAsIDAsIDEpCnJyLCBjYyA9IGVsbGlwc2VfcGVyaW1ldGVyKDEyMCwgNDAwLCA2MCwgMjAsIG9yaWVudGF0aW9uPW1hdGgucGkgLyAyLikKaW1nW3JyLCBjYywgOl0gPSAoMSwgMSwgMSkKCmF4MS5pbXNob3coaW1nKQpheDEuc2V0X3RpdGxlKCdObyBhbnRpLWFsaWFzaW5nJykKYXgxLmF4aXMoJ29mZicpCgoKZnJvbSBza2ltYWdlLmRyYXcgaW1wb3J0IGxpbmVfYWEsIGNpcmNsZV9wZXJpbWV0ZXJfYWEKCgppbWcgPSBucC56ZXJvcygoMTAwLCAxMDApLCBkdHlwZT1ucC5kb3VibGUpCgojIGFudGktYWxpYXNlZCBsaW5lCnJyLCBjYywgdmFsID0gbGluZV9hYSgxMiwgMTIsIDIwLCA1MCkKaW1nW3JyLCBjY10gPSB2YWwKCiMgYW50aS1hbGlhc2VkIGNpcmNsZQpyciwgY2MsIHZhbCA9IGNpcmNsZV9wZXJpbWV0ZXJfYWEoNjAsIDQwLCAzMCkKaW1nW3JyLCBjY10gPSB2YWwKCgpheDIuaW1zaG93KGltZywgY21hcD1wbHQuY20uZ3JheSwgaW50ZXJwb2xhdGlvbj0nbmVhcmVzdCcpCmF4Mi5zZXRfdGl0bGUoJ0FudGktYWxpYXNpbmcnKQpheDIuYXhpcygnb2ZmJykKCnBsdC5zaG93KCk=</div>
