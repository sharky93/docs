.. _example_plot_marching_cubes.py:


==============
Marching Cubes
==============

Marching cubes is an algorithm to extract a 2D surface mesh from a 3D volume.
This can be conceptualized as a 3D generalization of isolines on topographical
or weather maps. It works by iterating across the volume, looking for regions
which cross the level of interest. If such regions are found, triangulations
are generated and added to an output mesh. The final result is a set of
vertices and a set of triangular faces.

The algorithm requires a data volume and an isosurface value. For example, in
CT imaging Hounsfield units of +700 to +3000 represent bone. So, one potential
input would be a reconstructed CT set of data and the value +700, to extract
a mesh for regions of bone or bone-like density.

This implementation also works correctly on anisotropic datasets, where the
voxel spacing is not equal for every spatial dimension, through use of the
`spacing` kwarg.


.. image:: images/plot_marching_cubes_1.png
    :align: center


.. raw:: html
    
    <p id="controls">
        <button type="button" class="btn btn-default btn-small editcode">
            <i class="icon-edit"></i>
        </button>
    </p>

.. literalinclude:: plot_marching_cubes.py
    :lines: 23-


.. raw:: html

    <p id="run_btn">
        <button type="button" class="btn btn-default btn-lg" id="runcode">
            <i class="icon-play"></i> Run
        </button>
        <button type="button" class="btn btn-default btn-lg" id="reload">
            <i class="icon-refresh"></i>
        </button>
        <img id="loading" src="../_static/ajax-loader.gif"/>
    </p>

.. raw:: html

    <p>
        <div class="alert alert-success" id="success-message"></div>
        <div class="alert alert-error" id="error-message"></div>
        <div class="all-output">
            <p class="stdout-group">
                <i class="icon-info-sign"></i> <u>STDOUT</u>
            </p>
            <pre id="stdout"></pre>
            <hr class="stdout-group">
            <p class="stderr-group">
                <i class="icon-remove-sign"></i> <u>STDERR</u>
            </p>
            <pre id="stderr"></pre>
            <hr class="stderr-group">
        </div>
    </p>


**Python source code:** :download:`download <plot_marching_cubes.py>`
(generated using ``skimage`` |version|)



**IPython Notebook:** :download:`download <./notebook/plot_marching_cubes.ipynb>`
(generated using ``skimage`` |version|)


.. raw:: html

    <div class="tobehidden">aW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKZnJvbSBtcGxfdG9vbGtpdHMubXBsb3QzZC5hcnQzZCBpbXBvcnQgUG9seTNEQ29sbGVjdGlvbgoKZnJvbSBza2ltYWdlIGltcG9ydCBtZWFzdXJlCmZyb20gc2tpbWFnZS5kcmF3IGltcG9ydCBlbGxpcHNvaWQKCiMgR2VuZXJhdGUgYSBsZXZlbCBzZXQgYWJvdXQgemVybyBvZiB0d28gaWRlbnRpY2FsIGVsbGlwc29pZHMgaW4gM0QKZWxsaXBfYmFzZSA9IGVsbGlwc29pZCg2LCAxMCwgMTYsIGxldmVsc2V0PVRydWUpCmVsbGlwX2RvdWJsZSA9IG5wLmNvbmNhdGVuYXRlKChlbGxpcF9iYXNlWzotMSwgLi4uXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsbGlwX2Jhc2VbMjosIC4uLl0pLCBheGlzPTApCgojIFVzZSBtYXJjaGluZyBjdWJlcyB0byBvYnRhaW4gdGhlIHN1cmZhY2UgbWVzaCBvZiB0aGVzZSBlbGxpcHNvaWRzCnZlcnRzLCBmYWNlcyA9IG1lYXN1cmUubWFyY2hpbmdfY3ViZXMoZWxsaXBfZG91YmxlLCAwKQoKIyBEaXNwbGF5IHJlc3VsdGluZyB0cmlhbmd1bGFyIG1lc2ggdXNpbmcgTWF0cGxvdGxpYi4gVGhpcyBjYW4gYWxzbyBiZSBkb25lCiMgd2l0aCBtYXlhdmkgKHNlZSBza2ltYWdlLm1lYXN1cmUubWFyY2hpbmdfY3ViZXMgZG9jc3RyaW5nKS4KZmlnID0gcGx0LmZpZ3VyZShmaWdzaXplPSgxMCwgMTIpKQpheCA9IGZpZy5hZGRfc3VicGxvdCgxMTEsIHByb2plY3Rpb249JzNkJykKCiMgRmFuY3kgaW5kZXhpbmc6IGB2ZXJ0c1tmYWNlc11gIHRvIGdlbmVyYXRlIGEgY29sbGVjdGlvbiBvZiB0cmlhbmdsZXMKbWVzaCA9IFBvbHkzRENvbGxlY3Rpb24odmVydHNbZmFjZXNdKQpheC5hZGRfY29sbGVjdGlvbjNkKG1lc2gpCgpheC5zZXRfeGxhYmVsKCJ4LWF4aXM6IGEgPSA2IHBlciBlbGxpcHNvaWQiKQpheC5zZXRfeWxhYmVsKCJ5LWF4aXM6IGIgPSAxMCIpCmF4LnNldF96bGFiZWwoInotYXhpczogYyA9IDE2IikKCmF4LnNldF94bGltKDAsIDI0KSAgIyBhID0gNiAodGltZXMgdHdvIGZvciAybmQgZWxsaXBzb2lkKQpheC5zZXRfeWxpbSgwLCAyMCkgICMgYiA9IDEwCmF4LnNldF96bGltKDAsIDMyKSAgIyBjID0gMTYKCnBsdC5zaG93KCk=</div>
