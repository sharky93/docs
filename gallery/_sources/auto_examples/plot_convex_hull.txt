.. _example_plot_convex_hull.py:


===========
Convex Hull
===========

The convex hull of a binary image is the set of pixels included in the
smallest convex polygon that surround all white pixels in the input.

In this example, we show how the input pixels (white) get filled in by the
convex hull (white and grey).

A good overview of the algorithm is given on `Steve Eddin's blog
<http://blogs.mathworks.com/steve/2011/10/04/binary-image-convex-hull-algorithm-notes/>`__.


.. image:: images/plot_convex_hull_1.png
    :align: center


.. raw:: html
    
    <p id="controls">
        <button type="button" class="btn btn-default btn-small editcode">
            <i class="icon-edit"></i>
        </button>
    </p>

.. literalinclude:: plot_convex_hull.py
    :lines: 16-


.. raw:: html

    <p id="run_btn">
        <button type="button" class="btn btn-default btn-lg" id="runcode">
            <i class="icon-play"></i> Run
        </button>
        <button type="button" class="btn btn-default btn-lg" id="reload">
            <i class="icon-refresh"></i>
        </button>
        <img id="loading" src="../_static/ajax-loader.gif"/>
    </p>

.. raw:: html

    <p>
        <div class="alert alert-success" id="success-message"></div>
        <div class="alert alert-error" id="error-message"></div>
        <div class="all-output">
            <p class="stdout-group">
                <i class="icon-info-sign"></i> <u>STDOUT</u>
            </p>
            <pre id="stdout"></pre>
            <hr class="stdout-group">
            <p class="stderr-group">
                <i class="icon-remove-sign"></i> <u>STDERR</u>
            </p>
            <pre id="stderr"></pre>
            <hr class="stderr-group">
        </div>
    </p>


**Python source code:** :download:`download <plot_convex_hull.py>`
(generated using ``skimage`` |version|)



**IPython Notebook:** :download:`download <./notebook/plot_convex_hull.ipynb>`
(generated using ``skimage`` |version|)


.. raw:: html

    <div class="tobehidden">aW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQKCmZyb20gc2tpbWFnZS5tb3JwaG9sb2d5IGltcG9ydCBjb252ZXhfaHVsbF9pbWFnZQoKCmltYWdlID0gbnAuYXJyYXkoCiAgICBbWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLAogICAgIFswLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwXSwKICAgICBbMCwgMCwgMCwgMSwgMCwgMSwgMCwgMCwgMF0sCiAgICAgWzAsIDAsIDEsIDAsIDAsIDAsIDEsIDAsIDBdLAogICAgIFswLCAxLCAwLCAwLCAwLCAwLCAwLCAxLCAwXSwKICAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF1dLCBkdHlwZT1mbG9hdCkKCm9yaWdpbmFsX2ltYWdlID0gbnAuY29weShpbWFnZSkKCmNodWxsID0gY29udmV4X2h1bGxfaW1hZ2UoaW1hZ2UpCmltYWdlW2NodWxsXSArPSAxCiMgaW1hZ2UgaXMgbm93OgojW1sgMC4gIDAuICAwLiAgMC4gIDAuICAwLiAgMC4gIDAuICAwLl0KIyBbIDAuICAwLiAgMC4gIDAuICAyLiAgMC4gIDAuICAwLiAgMC5dCiMgWyAwLiAgMC4gIDAuICAyLiAgMS4gIDIuICAwLiAgMC4gIDAuXQojIFsgMC4gIDAuICAyLiAgMS4gIDEuICAxLiAgMi4gIDAuICAwLl0KIyBbIDAuICAyLiAgMS4gIDEuICAxLiAgMS4gIDEuICAyLiAgMC5dCiMgWyAwLiAgMC4gIDAuICAwLiAgMC4gIDAuICAwLiAgMC4gIDAuXV0KCgpmaWcsIChheDEsIGF4MikgPSBwbHQuc3VicGxvdHMoMSwgMiwgZmlnc2l6ZT0oMTAsIDYpKQpheDEuc2V0X3RpdGxlKCdPcmlnaW5hbCBwaWN0dXJlJykKYXgxLmltc2hvdyhvcmlnaW5hbF9pbWFnZSwgY21hcD1wbHQuY20uZ3JheSwgaW50ZXJwb2xhdGlvbj0nbmVhcmVzdCcpCmF4Mi5zZXRfdGl0bGUoJ1RyYW5zZm9ybWVkIHBpY3R1cmUnKQpheDIuaW1zaG93KGltYWdlLCBjbWFwPXBsdC5jbS5ncmF5LCBpbnRlcnBvbGF0aW9uPSduZWFyZXN0JykKcGx0LnNob3coKQ==</div>
